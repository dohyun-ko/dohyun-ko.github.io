{"version":3,"file":"component---src-pages-printable-sections-awards-section-tsx-d2a49b57c572ec59524b.js","mappings":"4MAaO,MAAMA,GAAgBC,EAAAA,EAAAA,eAAiC,CAC5DC,YAAa,ICJf,MANoBC,KACHC,EAAAA,EAAAA,YAAWJ,GAEZE,YCPgB,I,2DCuDhC,MA1CoBG,IAAmC,IAAlC,QAAEC,GAA2BD,EAChD,MAAM,KAAEE,EAAI,IAAEC,EAAG,YAAEC,EAAW,SAAEC,EAAQ,WAAEC,EAAU,UAAEC,EAAS,QAAEC,GAC/DP,EACeH,IAEjB,OACEW,EAAAA,EAAAA,MAAA,OAAKC,WAAWC,EAAAA,EAAAA,IAAQ,YAAYC,EAAAA,EAAAA,GAAK,MAAOC,SAAA,EAC9CJ,EAAAA,EAAAA,MAACK,EAAAA,EAAQ,CAACC,KAAMZ,EAAIU,SAAA,EAClBG,EAAAA,EAAAA,KAAA,MAAIN,WAAWC,EAAAA,EAAAA,IAAQ,iBAAiBC,EAAAA,EAAAA,GAAK,IAAIC,SAAEX,IAElDC,IAAOa,EAAAA,EAAAA,KAAA,QAAMN,WAAWE,EAAAA,EAAAA,GAAK,KAAMC,UAAEI,EAAAA,EAAAA,GAAUd,SAGlDM,EAAAA,EAAAA,MAAA,QAAMC,WAAWE,EAAAA,EAAAA,GAAK,KAAMC,SAAA,EACzBK,EAAAA,EAAAA,GAAgB,IAAIC,KAAKZ,IAAY,KAAG,IACxCC,GAAUU,EAAAA,EAAAA,GAAgB,IAAIC,KAAKX,IAAY,SAGjDJ,IACCK,EAAAA,EAAAA,MAAAW,EAAAA,SAAA,CAAAP,SAAA,EACEG,EAAAA,EAAAA,KAAA,OAAKN,UAAW,aAChBM,EAAAA,EAAAA,KAACK,EAAAA,EAAa,CAAAR,SAAET,OAInBC,GAAYA,EAASiB,OAAS,IAC7Bb,EAAAA,EAAAA,MAAAW,EAAAA,SAAA,CAAAP,SAAA,EACEG,EAAAA,EAAAA,KAAA,OAAKN,UAAW,aAEhBM,EAAAA,EAAAA,KAAA,MAAIN,UAAW,qBAAqBG,SACjCR,EAASkB,KAAKlB,IACbW,EAAAA,EAAAA,KAAA,MAAAH,UACEG,EAAAA,EAAAA,KAAA,KAAGN,WAAWE,EAAAA,EAAAA,GAAK,KAAMC,SAAER,KADpBA,YAOb,C,+DCvCV,UALqBL,IAAqC,IAApC,SAAEa,GAA6Bb,EACnD,OAAOgB,EAAAA,EAAAA,KAAA,MAAIN,WAAWC,EAAAA,EAAAA,IAAQ,aAAaC,EAAAA,EAAAA,GAAK,OAAOC,SAAEA,GAAc,C,0ECmBzE,UApBqBb,IAAsB,MAALA,EACpC,MAAM,EAAEwB,IAAMC,EAAAA,EAAAA,kBAEd,OACEhB,EAAAA,EAAAA,MAAAW,EAAAA,SAAA,CAAAP,SAAA,EACEG,EAAAA,EAAAA,KAACU,EAAAA,QAAY,CAAAb,SAAC,YAEdG,EAAAA,EAAAA,KAAA,OAAKN,UAAW,cAEhBM,EAAAA,EAAAA,KAAA,OAAKN,UAAW,gBAAgBG,SAC5BW,EAAE,aAAc,CAAEG,eAAe,IAChCC,QAAQC,GAAUA,EAAMC,cACxBP,KAAKM,IACJb,EAAAA,EAAAA,KAACe,EAAAA,QAAW,CAAkB9B,QAAS4B,GAArBA,EAAM3B,YAG7B,C,qBCnBP,IAJmBC,GACVA,EAAI6B,QAAQ,WAAY,IAAIA,QAAQ,UAAW,IAAIA,QAAQ,MAAO,G","sources":["webpack://dohyun-ko.github.io/./src/App.tsx","webpack://dohyun-ko.github.io/./src/hooks/useIsMobile.tsx","webpack://dohyun-ko.github.io/./src/utils/const.ts","webpack://dohyun-ko.github.io/./src/pages/printable/components/ProjectCard.tsx","webpack://dohyun-ko.github.io/./src/pages/printable/components/SectionTitle.tsx","webpack://dohyun-ko.github.io/./src/pages/printable/sections/AwardsSection.tsx","webpack://dohyun-ko.github.io/./src/utils/formatUrl.ts"],"sourcesContent":["import { createContext, useLayoutEffect, useState } from \"react\";\nimport { BrowserRouter, Routes } from \"react-router-dom\";\n\nexport enum RoutePath {\n  HOME = \"/\",\n  RESUME = \"/resume\",\n  PRINTABLE = \"/printable\",\n}\n\ntype LayoutContextType = {\n  windowWidth: number;\n};\n\nexport const LayoutContext = createContext<LayoutContextType>({\n  windowWidth: 0,\n});\n\nfunction App() {\n  const [windowWidth, setWindowWidth] = useState(0);\n\n  useLayoutEffect(() => {\n    const updateWidth = () => {\n      setWindowWidth(window.innerWidth);\n    };\n\n    window.addEventListener(\"resize\", updateWidth);\n    updateWidth();\n    return () => window.removeEventListener(\"resize\", updateWidth);\n  }, []);\n\n  return (\n    <LayoutContext.Provider\n      value={{\n        windowWidth,\n      }}\n    >\n      <BrowserRouter>\n        <Routes></Routes>\n      </BrowserRouter>\n    </LayoutContext.Provider>\n  );\n}\n\nexport default App;\n","import { LayoutContext } from \"@/App\";\nimport { MOBILE_MAX_WIDTH } from \"@/utils/const\";\nimport { useContext } from \"react\";\n\nconst useIsMobile = () => {\n  const layout = useContext(LayoutContext);\n\n  return layout.windowWidth < MOBILE_MAX_WIDTH;\n};\n\nexport default useIsMobile;\n","export const MOBILE_MAX_WIDTH = 768;\n","import useIsMobile from '@/hooks/useIsMobile';\nimport Project from '@/types/Project';\nimport { formatYearMonth } from '@/utils/dateFormats';\nimport font from '@/utils/font';\nimport formatUrl from '@/utils/formatUrl';\nimport ReactMarkdown from 'react-markdown';\nimport { twMerge } from 'tailwind-merge';\nimport StylessA from '../../../components/StylessA';\n\ninterface ProjectCardProps {\n  project: Project;\n}\n\nconst ProjectCard = ({ project }: ProjectCardProps) => {\n  const { name, url, description, whatIDid, techStacks, startedAt, endedAt } =\n    project;\n  const isMobile = useIsMobile();\n\n  return (\n    <div className={twMerge('flex-col', font(0.75))}>\n      <StylessA href={url}>\n        <h3 className={twMerge('font-semibold', font(1))}>{name}</h3>\n\n        {url && <span className={font(0.75)}>{formatUrl(url)}</span>}\n      </StylessA>\n\n      <span className={font(0.75)}>\n        {formatYearMonth(new Date(startedAt))} â€“{' '}\n        {endedAt ? formatYearMonth(new Date(endedAt)) : 'Now'}\n      </span>\n\n      {description && (\n        <>\n          <div className={'h-[5px]'} />\n          <ReactMarkdown>{description}</ReactMarkdown>\n        </>\n      )}\n\n      {whatIDid && whatIDid.length > 0 && (\n        <>\n          <div className={'h-[5px]'} />\n\n          <ul className={'m-0 list-disc pl-5'}>\n            {whatIDid.map((whatIDid) => (\n              <li key={whatIDid}>\n                <p className={font(0.75)}>{whatIDid}</p>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ProjectCard;\n","import font from '@/utils/font';\nimport { twMerge } from 'tailwind-merge';\n\ninterface SectionTitleProps {\n  children?: React.ReactNode;\n}\n\nconst SectionTitle = ({ children }: SectionTitleProps) => {\n  return <h2 className={twMerge('font-bold', font(1.25))}>{children}</h2>;\n  // set to h2 instead of h1 since printable resume does not have section tags\n};\n\nexport default SectionTitle;\n","import Project from '@/types/Project';\nimport { useTranslation } from 'react-i18next';\nimport ProjectCard from '../components/ProjectCard';\nimport SectionTitle from '../components/SectionTitle';\n\ninterface AwardSection {}\n\nconst AwardSection = ({}: AwardSection) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <SectionTitle>Awards</SectionTitle>\n\n      <div className={'h-[10px]'} />\n\n      <div className={'flex flex-col'}>\n        {(t('award.list', { returnObjects: true }) as Project[])\n          .filter((award) => award.isImportant)\n          .map((award) => (\n            <ProjectCard key={award.name} project={award} />\n          ))}\n      </div>\n    </>\n  );\n};\n\nexport default AwardSection;\n","const formatUrl = (url: string) => {\n  return url.replace(\"https://\", \"\").replace(\"http://\", \"\").replace(/\\/$/, \"\");\n};\n\nexport default formatUrl;\n"],"names":["LayoutContext","createContext","windowWidth","useIsMobile","useContext","_ref","project","name","url","description","whatIDid","techStacks","startedAt","endedAt","_jsxs","className","twMerge","font","children","StylessA","href","_jsx","formatUrl","formatYearMonth","Date","_Fragment","ReactMarkdown","length","map","t","useTranslation","SectionTitle","returnObjects","filter","award","isImportant","ProjectCard","replace"],"sourceRoot":""}