{"version":3,"file":"component---src-pages-printable-components-organization-card-tsx-018fb2eb06f53f485794.js","mappings":"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","sources":["webpack://dohyun-ko.github.io/./src/pages/printable/components/OrganizationCard.tsx","webpack://dohyun-ko.github.io/./src/App.tsx","webpack://dohyun-ko.github.io/./src/hooks/useIsMobile.tsx","webpack://dohyun-ko.github.io/./src/utils/const.ts","webpack://dohyun-ko.github.io/./src/pages/printable/components/ProjectCard.tsx","webpack://dohyun-ko.github.io/./src/utils/formatUrl.ts"],"sourcesContent":["import Organization from '@/types/Organization';\nimport { formatYearMonth } from '@/utils/dateFormats';\nimport font from '@/utils/font';\nimport formatUrl from '@/utils/formatUrl';\nimport { twMerge } from 'tailwind-merge';\nimport StylessA from '../../../components/StylessA';\nimport ProjectCard from './ProjectCard';\n\ninterface OrganizationCardProps {\n  organization: Organization;\n}\n\nconst OrganizationCard = ({ organization }: OrganizationCardProps) => {\n  const { name, color, url, job, startedAt, endedAt, projects } = organization;\n\n  return (\n    <div className={'PrintableCard'}>\n      <div\n        className={twMerge(\n          'flex flex-col border-l-[5px] border-solid pl-2.5',\n          color ? `border-[${color}]` : 'border-gray-400',\n        )}\n      >\n        <StylessA href={url}>\n          <div className={'flex flex-wrap'}>\n            <h3 className={twMerge('font-bold', font(1))}>{name}</h3>\n\n            {url && <span className={font(0.75)}>{formatUrl(url)}</span>}\n          </div>\n        </StylessA>\n\n        <span className={font(0.75)}>{job}</span>\n\n        <span className={font(0.75)}>\n          {formatYearMonth(new Date(startedAt))} –{' '}\n          {endedAt ? formatYearMonth(new Date(endedAt)) : 'Now'}\n        </span>\n      </div>\n\n      <div className={'flex flex-col gap-5'}>\n        {projects\n          .filter((project) => project.isImportant)\n          .map((project) => (\n            <ProjectCard key={project.name} project={project} />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default OrganizationCard;\n","import { createContext, useLayoutEffect, useState } from \"react\";\nimport { BrowserRouter, Routes } from \"react-router-dom\";\n\nexport enum RoutePath {\n  HOME = \"/\",\n  RESUME = \"/resume\",\n  PRINTABLE = \"/printable\",\n}\n\ntype LayoutContextType = {\n  windowWidth: number;\n};\n\nexport const LayoutContext = createContext<LayoutContextType>({\n  windowWidth: 0,\n});\n\nfunction App() {\n  const [windowWidth, setWindowWidth] = useState(0);\n\n  useLayoutEffect(() => {\n    const updateWidth = () => {\n      setWindowWidth(window.innerWidth);\n    };\n\n    window.addEventListener(\"resize\", updateWidth);\n    updateWidth();\n    return () => window.removeEventListener(\"resize\", updateWidth);\n  }, []);\n\n  return (\n    <LayoutContext.Provider\n      value={{\n        windowWidth,\n      }}\n    >\n      <BrowserRouter>\n        <Routes></Routes>\n      </BrowserRouter>\n    </LayoutContext.Provider>\n  );\n}\n\nexport default App;\n","import { LayoutContext } from \"@/App\";\nimport { MOBILE_MAX_WIDTH } from \"@/utils/const\";\nimport { useContext } from \"react\";\n\nconst useIsMobile = () => {\n  const layout = useContext(LayoutContext);\n\n  return layout.windowWidth < MOBILE_MAX_WIDTH;\n};\n\nexport default useIsMobile;\n","export const MOBILE_MAX_WIDTH = 768;\n","import useIsMobile from '@/hooks/useIsMobile';\nimport Project from '@/types/Project';\nimport { formatYearMonth } from '@/utils/dateFormats';\nimport font from '@/utils/font';\nimport formatUrl from '@/utils/formatUrl';\nimport ReactMarkdown from 'react-markdown';\nimport { twMerge } from 'tailwind-merge';\nimport StylessA from '../../../components/StylessA';\n\ninterface ProjectCardProps {\n  project: Project;\n}\n\nconst ProjectCard = ({ project }: ProjectCardProps) => {\n  const { name, url, description, whatIDid, techStacks, startedAt, endedAt } =\n    project;\n  const isMobile = useIsMobile();\n\n  return (\n    <div className={twMerge('flex-col', font(0.75))}>\n      <StylessA href={url}>\n        <h3 className={twMerge('font-semibold', font(1))}>{name}</h3>\n\n        {url && <span className={font(0.75)}>{formatUrl(url)}</span>}\n      </StylessA>\n\n      <span className={font(0.75)}>\n        {formatYearMonth(new Date(startedAt))} –{' '}\n        {endedAt ? formatYearMonth(new Date(endedAt)) : 'Now'}\n      </span>\n\n      {description && (\n        <>\n          <div className={'h-[5px]'} />\n          <ReactMarkdown>{description}</ReactMarkdown>\n        </>\n      )}\n\n      {whatIDid && whatIDid.length > 0 && (\n        <>\n          <div className={'h-[5px]'} />\n\n          <ul className={'m-0 list-disc pl-5'}>\n            {whatIDid.map((whatIDid) => (\n              <li key={whatIDid}>\n                <p className={font(0.75)}>{whatIDid}</p>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ProjectCard;\n","const formatUrl = (url: string) => {\n  return url.replace(\"https://\", \"\").replace(\"http://\", \"\").replace(/\\/$/, \"\");\n};\n\nexport default formatUrl;\n"],"names":["_ref","organization","name","color","url","job","startedAt","endedAt","projects","_jsxs","className","children","twMerge","_jsx","StylessA","href","font","formatUrl","formatYearMonth","Date","filter","project","isImportant","map","ProjectCard","LayoutContext","createContext","windowWidth","useIsMobile","useContext","description","whatIDid","techStacks","_Fragment","ReactMarkdown","length","replace"],"sourceRoot":""}